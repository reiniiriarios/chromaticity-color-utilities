"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9266],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return m}});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},c=Object.keys(e);for(o=0;o<c.length;o++)r=c[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(o=0;o<c.length;o++)r=c[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var a=o.createContext({}),s=function(e){var t=o.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=s(e.components);return o.createElement(a.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,c=e.originalType,a=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(r),m=n,f=d["".concat(a,".").concat(m)]||d[m]||u[m]||c;return r?o.createElement(f,i(i({ref:t},p),{},{components:r})):o.createElement(f,i({ref:t},p))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=r.length,i=new Array(c);i[0]=d;var l={};for(var a in t)hasOwnProperty.call(t,a)&&(l[a]=t[a]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var s=2;s<c;s++)i[s]=r[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9224:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return a},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var o=r(7462),n=r(3366),c=(r(7294),r(3905)),i=["components"],l={title:"Rec. 2020 RGB",sidebar_position:4},a="Rec. 2020 RGB",s={unversionedId:"color-types/rec2020",id:"color-types/rec2020",title:"Rec. 2020 RGB",description:"UHD video standard",source:"@site/docs/color-types/rec2020.md",sourceDirName:"color-types",slug:"/color-types/rec2020",permalink:"/chromaticity-color-utilities/docs/color-types/rec2020",editUrl:"https://github.com/reiniiriarios/chromaticity-color-utilities/docs/docs/color-types/rec2020.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Rec. 2020 RGB",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Rec. 709 RGB",permalink:"/chromaticity-color-utilities/docs/color-types/rec709"},next:{title:"HSV",permalink:"/chromaticity-color-utilities/docs/color-types/hsv"}},p={},u=[{value:"JavaScript",id:"javascript",level:2},{value:"TypeScript",id:"typescript",level:2}],d={toc:u};function m(e){var t=e.components,r=(0,n.Z)(e,i);return(0,c.kt)("wrapper",(0,o.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"rec-2020-rgb"},"Rec. 2020 RGB"),(0,c.kt)("div",{class:"subheader"},"UHD video standard"),(0,c.kt)("p",null,"Limits RGB color to video levels (64 to 940 for 10-bit or 256 to 3760 for 12-bit). Input bit depth must be 10 or 12. Conversion to Y'PbPr and Y'CbCr will fail as this module does not yet have gamma adjustment implemented."),(0,c.kt)("p",null,"This method does not currently support data levels."),(0,c.kt)("p",null,"RGB values ",(0,c.kt)("em",{parentName:"p"},"may fall outside limits"),"."),(0,c.kt)("p",null,"Alpha channel maintains data levels (0 - 1023 / 0 - 4095)."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-ts"},"Color.from('rec2020rgb',[r, g, b, a?], {\n  round: boolean,  // optional, defaults to true\n  bitDepth: number // optional, defaults to 10, must be 10 or 12\n})\n\n.to('rec2020rgb', {\n  round: boolean,  // optional, defaults to true\n  bitDepth: number // optional, defaults to 10, must be 10 or 12\n})\n")),(0,c.kt)("h2",{id:"javascript"},"JavaScript"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},"const Color = require('chromaticity-color-utilities')\n\nconst color1 = Color.from('rec2020rgb', [940, 64, 940])\nconst color1 = Color.from('rec2020rgb', [3760, 256, 3760], { bitDepth: 12 })\n\nconst color3 = color2.to('rec2020rgb')\nconst color3 = color2.to('rec2020rgb', { bitDepth: 10 })\n")),(0,c.kt)("h2",{id:"typescript"},"TypeScript"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-ts"},"import Color, { colorTypes } from 'chromaticity-color-utilities'\n\nconst c: colorTypes.rec2020rgb = Color.from('rec2020rgb', [940, 64, 940])\n")))}m.isMDXComponent=!0}}]);