"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1778],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return d}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},c=Object.keys(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,c=e.originalType,s=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),m=l(r),d=o,b=m["".concat(s,".").concat(d)]||m[d]||p[d]||c;return r?n.createElement(b,i(i({ref:t},u),{},{components:r})):n.createElement(b,i({ref:t},u))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=r.length,i=new Array(c);i[0]=m;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var l=2;l<c;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},6293:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return p}});var n=r(7462),o=r(3366),c=(r(7294),r(3905)),i=["components"],a={title:"Tetradic Schemes",sidebar_position:3},s="Tetradic Schemes",l={unversionedId:"color-schemes/tetradic",id:"color-schemes/tetradic",title:"Tetradic Schemes",description:"+ Square Schemes",source:"@site/docs/color-schemes/tetradic.md",sourceDirName:"color-schemes",slug:"/color-schemes/tetradic",permalink:"/chromaticity-color-utilities/docs/color-schemes/tetradic",editUrl:"https://github.com/reiniiriarios/chromaticity-color-utilities/docs/docs/color-schemes/tetradic.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Tetradic Schemes",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Analogous Schemes",permalink:"/chromaticity-color-utilities/docs/color-schemes/analogous"},next:{title:"Tint Scales",permalink:"/chromaticity-color-utilities/docs/color-schemes/tint"}},u={},p=[{value:"JavaScript",id:"javascript",level:2},{value:"TypeScript",id:"typescript",level:2}],m={toc:p};function d(e){var t=e.components,r=(0,o.Z)(e,i);return(0,c.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"tetradic-schemes"},"Tetradic Schemes"),(0,c.kt)("div",{class:"subheader"},"+ Square Schemes"),(0,c.kt)("p",null,"The ",(0,c.kt)("inlineCode",{parentName:"p"},"square")," method is synonymous with ",(0,c.kt)("inlineCode",{parentName:"p"},"tetradic")," with a 90\xb0 angle."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-ts"},".scheme('tetradic', {\n  angle: number, // optional, default = 45\n  round: boolean // optional, defaults to true\n})\n.scheme('square', {\n  round: boolean // optional, defaults to true\n}) // angle = 90\n")),(0,c.kt)("h2",{id:"javascript"},"JavaScript"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},"const Color = require('chromaticity-color-utilities')\n\nconst scheme1 = Color.from('rgb', [255, 0, 255]).scheme('tetradic', {\n  angle: 42,\n})\n// [\n//   rgb { r: 255, g: 0, b: 255, a: 255, bitDepth: 8, max: 255 },\n//   rgb { r: 255, g: 0, b: 76, a: 255, bitDepth: 8, max: 255 },\n//   rgb { r: 0, g: 255, b: 179, a: 255, bitDepth: 8, max: 255 },\n//   rgb { r: 0, g: 255, b: 0, a: 255, bitDepth: 8, max: 255 }\n// ]\nconst scheme2 = Color.from('rgb', [255, 0, 255]).scheme('square')\n// [\n//   rgb { r: 255, g: 0, b: 255, a: 255, bitDepth: 8, max: 255 },\n//   rgb { r: 255, g: 128, b: 0, a: 255, bitDepth: 8, max: 255 },\n//   rgb { r: 0, g: 128, b: 255, a: 255, bitDepth: 8, max: 255 },\n//   rgb { r: 0, g: 255, b: 0, a: 255, bitDepth: 8, max: 255 }\n// ]\n")),(0,c.kt)("h2",{id:"typescript"},"TypeScript"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-ts"},"import Color, { colorTypes } from 'chromaticity-color-utilities'\n\nconst scheme1: colorTypes.rgb[] = Color.from('rgb', [255, 0, 255]).scheme(\n  'tetradic',\n  { angle: 42 }\n)\n")))}d.isMDXComponent=!0}}]);