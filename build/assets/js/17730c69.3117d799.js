"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4506],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(r),m=o,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return r?n.createElement(f,a(a({ref:t},p),{},{components:r})):n.createElement(f,a({ref:t},p))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=r[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5546:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var n=r(7462),o=r(3366),i=(r(7294),r(3905)),a=["components"],l={layout:"page",title:"Lighten",parent:"Modifying Colors",nav_order:3},c="Lighten",s={unversionedId:"modifying-colors/lighten",id:"modifying-colors/lighten",title:"Lighten",description:"Methods available are: hsl/lightness, hsp/perceived",source:"@site/docs/modifying-colors/lighten.md",sourceDirName:"modifying-colors",slug:"/modifying-colors/lighten",permalink:"/chromaticity-color-utilities/docs/modifying-colors/lighten",editUrl:"https://github.com/reiniiriarios/chromaticity-color-utilities/docs/docs/modifying-colors/lighten.md",tags:[],version:"current",frontMatter:{layout:"page",title:"Lighten",parent:"Modifying Colors",nav_order:3},sidebar:"tutorialSidebar",previous:{title:"Desaturate",permalink:"/chromaticity-color-utilities/docs/modifying-colors/desaturate"},next:{title:"Saturate",permalink:"/chromaticity-color-utilities/docs/modifying-colors/saturate"}},p={},u=[{value:"JavaScript",id:"javascript",level:2},{value:"TypeScript",id:"typescript",level:2}],d={toc:u};function m(e){var t=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"lighten"},"Lighten"),(0,i.kt)("p",null,"Methods available are: ",(0,i.kt)("inlineCode",{parentName:"p"},"hsl"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"lightness"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"hsp"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"perceived")),(0,i.kt)("p",null,"These methods are intended to provide alternative ways of modifying a color versus changing the values directly, which can make more sense."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},".modify('lighten', {\n  amount: number, // optional, 0 - 1, defaults to 0.5\n  method: string, // optional, defaults to 'lightness'\n  round: boolean, // optional, defaults to true\n})\n")),(0,i.kt)("h2",{id:"javascript"},"JavaScript"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const Color = require('chromaticity-color-utilities')\n\nconst color1 = Color.from('rgb', [255, 0, 255, 200]).modify('lighten', {\n  method: 'lightness',\n})\n// rgb { r: 255, g: 128, b: 255, a: 200, bitDepth: 8, max: 255 }\nconst color2 = Color.from('rgb', [100, 0, 100]).modify('lighten', {\n  method: 'hsp',\n})\n// rgb { r: 250, g: 0, b: 250, a: 255, bitDepth: 8, max: 255 }\n")),(0,i.kt)("h2",{id:"typescript"},"TypeScript"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import Color, { colorTypes } from 'chromaticity-color-utilities'\n\nconst color1: colorTypes.rgb[] = Color.from('rgb', [255, 0, 255, 200]).modify(\n  'lighten',\n  { method: 'lightness' }\n)\n")))}m.isMDXComponent=!0}}]);