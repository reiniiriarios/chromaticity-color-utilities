"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2896],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return d}});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},i=Object.keys(e);for(o=0;o<i.length;o++)r=i[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)r=i[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var a=o.createContext({}),u=function(e){var t=o.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},s=function(e){var t=u(e.components);return o.createElement(a.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},f=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,a=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),f=u(r),d=n,m=f["".concat(a,".").concat(d)]||f[d]||p[d]||i;return r?o.createElement(m,c(c({ref:t},s),{},{components:r})):o.createElement(m,c({ref:t},s))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,c=new Array(i);c[0]=f;var l={};for(var a in t)hasOwnProperty.call(t,a)&&(l[a]=t[a]);l.originalType=e,l.mdxType="string"==typeof e?e:n,c[1]=l;for(var u=2;u<i;u++)c[u]=r[u];return o.createElement.apply(null,c)}return o.createElement.apply(null,r)}f.displayName="MDXCreateElement"},6536:function(e,t,r){r.r(t),r.d(t,{assets:function(){return s},contentTitle:function(){return a},default:function(){return d},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return p}});var o=r(7462),n=r(3366),i=(r(7294),r(3905)),c=["components"],l={title:"CIE L*u*v*",sidebar_position:14},a="CIE L*u*v*",u={unversionedId:"color-types/luv",id:"color-types/luv",title:"CIE L*u*v*",description:"Derived from XYZ. L\\, luma, is identical to L\\ in L\\a\\b\\*",source:"@site/docs/color-types/luv.md",sourceDirName:"color-types",slug:"/color-types/luv",permalink:"/chromaticity-color-utilities/docs/color-types/luv",editUrl:"https://github.com/reiniiriarios/chromaticity-color-utilities/docs/docs/color-types/luv.md",tags:[],version:"current",sidebarPosition:14,frontMatter:{title:"CIE L*u*v*",sidebar_position:14},sidebar:"tutorialSidebar",previous:{title:"CIE L*a*b*",permalink:"/chromaticity-color-utilities/docs/color-types/lab"},next:{title:"YPbPr",permalink:"/chromaticity-color-utilities/docs/color-types/ypbpr"}},s={},p=[{value:"JavaScript",id:"javascript",level:2},{value:"TypeScript",id:"typescript",level:2}],f={toc:p};function d(e){var t=e.components,r=(0,n.Z)(e,c);return(0,i.kt)("wrapper",(0,o.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"cie-luv"},"CIE L","*","u","*","v","*"),(0,i.kt)("p",null,"Derived from XYZ. L","*",", luma, is identical to L","*"," in L","*","a","*","b","*"),(0,i.kt)("p",null,"When converting to most color types, you must supply color space and standard illuminant reference white. See available ",(0,i.kt)("a",{parentName:"p",href:"/docs/color-spaces-standard-illuminants/"},"Color Spaces and Stardard Illuminants"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"Color.from('luv', [l, u, v])\n\n.to('luv',{\n  colorSpace: string,     // optional, default = 'srgb' -- ignored if converting from xyz, lab\n  referenceWhite: string, // optional, default = 'd65'\n  round: boolean          // optional, defaults to true\n})\n")),(0,i.kt)("h2",{id:"javascript"},"JavaScript"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const Color = require('chromaticity-color-utilities')\n\nconst color1 = Color.from('luv',[60, 84, -109])\nconst color3 = color2.to('luv')\n\nconst color4 = color1.to('rgb')\nconst color5 = color1.to('rgb', {\n  colorSpace: 'adobergb',\n  referenceWhite: 'd50'\n})\n")),(0,i.kt)("h2",{id:"typescript"},"TypeScript"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import Color, { colorTypes } from 'chromaticity-color-utilities'\n\nconst c: colorTypes.luv = Color.from('luv',[60, 84, -109])\n")))}d.isMDXComponent=!0}}]);