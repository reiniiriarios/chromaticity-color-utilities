"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9114],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return f}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=c(r),f=o,d=m["".concat(s,".").concat(f)]||m[f]||p[f]||i;return r?n.createElement(d,a(a({ref:t},u),{},{components:r})):n.createElement(d,a({ref:t},u))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4527:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p}});var n=r(7462),o=r(3366),i=(r(7294),r(3905)),a=["components"],l={title:"HSP",sidebar_position:8},s="HSP",c={unversionedId:"color-types/hsp",id:"color-types/hsp",title:"HSP",description:"Hue, Saturation, Perceived Brightness",source:"@site/docs/color-types/hsp.md",sourceDirName:"color-types",slug:"/color-types/hsp",permalink:"/chromaticity-color-utilities/docs/color-types/hsp",editUrl:"https://github.com/reiniiriarios/chromaticity-color-utilities/docs/docs/color-types/hsp.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{title:"HSP",sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"HSI",permalink:"/chromaticity-color-utilities/docs/color-types/hsi"},next:{title:"CMYK",permalink:"/chromaticity-color-utilities/docs/color-types/cmyk"}},u={},p=[{value:"JavaScript",id:"javascript",level:2},{value:"TypeScript",id:"typescript",level:2}],m={toc:p};function f(e){var t=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"hsp"},"HSP"),(0,i.kt)("div",{class:"subheader"},"Hue, Saturation, Perceived Brightness"),(0,i.kt)("p",null,"The formula used to generate HSP is similar to the one Photoshop uses when converting images to greyscale."),(0,i.kt)("p",null,"Hue value is between 0 and 360. Saturation, perceived brightness, and alpha are between 0 and 100 (as in, percent)."),(0,i.kt)("p",null,"When passing P",(0,i.kt)("sub",null,"R")," and P",(0,i.kt)("sub",null,"B")," values, P",(0,i.kt)("sub",null,"R")," + P",(0,i.kt)("sub",null,"G")," + P",(0,i.kt)("sub",null,"B")," must = 1."),(0,i.kt)("p",null,"By default,"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"P",(0,i.kt)("sub",null,"R")," = 0.299"),(0,i.kt)("li",{parentName:"ul"},"P",(0,i.kt)("sub",null,"G")," = 0.587"),(0,i.kt)("li",{parentName:"ul"},"P",(0,i.kt)("sub",null,"B")," = 0.114")),(0,i.kt)("p",null,"*","*"," This formula is not as accurate as most others, but does offer another way of adjusting brightness in an image."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"Color.from('hsp',[h, s, p, a?],{\n  pb: number, // optional, default = 0.114\n  pr: number  // optional, default = 0.299\n})\n\n.to('hsp',{\n  round: boolean, // optional, default = true\n  pb: number,     // optional, default = 0.114\n  pr: number      // optional, default = 0.299\n})\n")),(0,i.kt)("h2",{id:"javascript"},"JavaScript"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const Color = require('chromaticity-color-utilities')\n\nconst color1 = Color.from('hsp',[300, 100, 65]).to('rgb')\n// rgb { r: 255, g: 0, b: 255, a: 255, bitDepth: 8, max: 255 }\nconst color3 = Color.from('rgb',[255, 0, 255]).to('hsp')\n// hsp { h: 300, s: 100, p: 64, a: 100, pr: 0.299, pg: 0.587, pb: 0.114 }\n")),(0,i.kt)("h2",{id:"typescript"},"TypeScript"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import Color, { colorTypes } from 'chromaticity-color-utilities'\n\nconst c: colorTypes.hsp = Color.from('hsp', [300, 100, 65])\n")))}f.isMDXComponent=!0}}]);