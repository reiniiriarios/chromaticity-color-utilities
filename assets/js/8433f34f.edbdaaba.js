"use strict";(self.webpackChunkchromaticity_color_utilities_documentation=self.webpackChunkchromaticity_color_utilities_documentation||[]).push([[20],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return d}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},s=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(r),d=o,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||i;return r?n.createElement(f,a(a({ref:t},s),{},{components:r})):n.createElement(f,a({ref:t},s))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=r[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},2438:function(e,t,r){r.r(t),r.d(t,{assets:function(){return s},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var n=r(7462),o=r(3366),i=(r(7294),r(3905)),a=["components"],l={title:"RGB",sidebar_position:1},c="RGB",p={unversionedId:"color-types/rgb",id:"color-types/rgb",title:"RGB",description:"Red, Green, Blue",source:"@site/docs/color-types/rgb.md",sourceDirName:"color-types",slug:"/color-types/rgb",permalink:"/chromaticity-color-utilities/docs/color-types/rgb",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"RGB",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Color Types and Conversions",permalink:"/chromaticity-color-utilities/docs/color-types/"},next:{title:"Hexidecimal",permalink:"/chromaticity-color-utilities/docs/color-types/hex"}},s={},u=[{value:"JavaScript",id:"javascript",level:2},{value:"TypeScript",id:"typescript",level:2}],m={toc:u};function d(e){var t=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"rgb"},"RGB"),(0,i.kt)("div",{class:"subheader"},"Red, Green, Blue"),(0,i.kt)("p",null,"All values are between 0 and ",(0,i.kt)("inlineCode",{parentName:"p"},"(2 ** bitDepth) - 1"),". With a default bit depth of 8, values are within 0-255. A color with a bit depth of 16 will have values ranging from 0-65535."),(0,i.kt)("p",null,"8-bit color is sometimes referred to as 24-bit or 32-bit (8 bits per channel, with 32-bit including an alpha channel). This package uses the more correct implementation of 32-bit meaning 32 bits per channel, and so generally most use cases would fall between 8 and 16 bit color depth."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"rgb"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"RGB"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"rgba"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"RGBA")," are synonymous."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"Color.from('rgb',[r, g, b, a?],{\n  bitDepth: number // optional, default = 8\n})\n\n.to('rgb',{\n  bitDepth: number, // optional, default = 8\n  round: boolean    // optional, default = true\n})\n")),(0,i.kt)("h2",{id:"javascript"},"JavaScript"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const Color = require('chromaticity-color-utilities')\n\nconst color1 = Color.from('rgb',[255, 0, 255])\nconst color3 = color2.to('rgb')\n\nconst color4 = Color.from('rgb',[1023, 0, 1023], { bitDepth: 10 })\n")),(0,i.kt)("h2",{id:"typescript"},"TypeScript"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import Color, { colorTypes } from 'chromaticity-color-utilities'\n\nconst c: colorTypes.rgb = Color.from('rgb',[255, 0, 255])\n")))}d.isMDXComponent=!0}}]);