"use strict";(self.webpackChunkchromaticity_color_utilities_documentation=self.webpackChunkchromaticity_color_utilities_documentation||[]).push([[4344],{3905:function(t,e,r){r.d(e,{Zo:function(){return u},kt:function(){return d}});var n=r(7294);function o(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function a(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function i(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?a(Object(r),!0).forEach((function(e){o(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function c(t,e){if(null==t)return{};var r,n,o=function(t,e){if(null==t)return{};var r,n,o={},a=Object.keys(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||(o[r]=t[r]);return o}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(o[r]=t[r])}return o}var l=n.createContext({}),s=function(t){var e=n.useContext(l),r=e;return t&&(r="function"==typeof t?t(e):i(i({},e),t)),r},u=function(t){var e=s(t.components);return n.createElement(l.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},m=n.forwardRef((function(t,e){var r=t.components,o=t.mdxType,a=t.originalType,l=t.parentName,u=c(t,["components","mdxType","originalType","parentName"]),m=s(r),d=o,f=m["".concat(l,".").concat(d)]||m[d]||p[d]||a;return r?n.createElement(f,i(i({ref:e},u),{},{components:r})):n.createElement(f,i({ref:e},u))}));function d(t,e){var r=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var a=r.length,i=new Array(a);i[0]=m;var c={};for(var l in e)hasOwnProperty.call(e,l)&&(c[l]=e[l]);c.originalType=t,c.mdxType="string"==typeof t?t:o,i[1]=c;for(var s=2;s<a;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},6290:function(t,e,r){r.r(e),r.d(e,{assets:function(){return u},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return p}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),i=["components"],c={layout:"page",title:"Saturate",parent:"Modifying Colors",nav_order:4},l="Saturate",s={unversionedId:"modifying-colors/saturate",id:"modifying-colors/saturate",title:"Saturate",description:"Methods available are: hsv, hsl. The input color type does not matter.",source:"@site/docs/modifying-colors/saturate.md",sourceDirName:"modifying-colors",slug:"/modifying-colors/saturate",permalink:"/chromaticity-color-utilities/docs/modifying-colors/saturate",editUrl:"https://github.com/reiniiriarios/chromaticity-color-utilities/docs/docs/modifying-colors/saturate.md",tags:[],version:"current",frontMatter:{layout:"page",title:"Saturate",parent:"Modifying Colors",nav_order:4},sidebar:"tutorialSidebar",previous:{title:"Lighten",permalink:"/chromaticity-color-utilities/docs/modifying-colors/lighten"},next:{title:"Spaces and Std Illuminants",permalink:"/chromaticity-color-utilities/docs/color-spaces-standard-illuminants"}},u={},p=[{value:"JavaScript",id:"javascript",level:2},{value:"TypeScript",id:"typescript",level:2}],m={toc:p};function d(t){var e=t.components,r=(0,o.Z)(t,i);return(0,a.kt)("wrapper",(0,n.Z)({},m,r,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"saturate"},"Saturate"),(0,a.kt)("p",null,"Methods available are: ",(0,a.kt)("inlineCode",{parentName:"p"},"hsv"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"hsl"),". The input color type does not matter."),(0,a.kt)("p",null,"These methods are intended to provide alternative ways of modifying a color versus changing the values directly, which can make more sense."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},".modify('saturate', {\n  amount: number, // optional, 0 - 1, defaults to 0.5\n  method: string, // optional, defaults to 'hsl'\n  round: boolean, // optional, defaults to true\n})\n")),(0,a.kt)("h2",{id:"javascript"},"JavaScript"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const Color = require('chromaticity-color-utilities')\n\nconst color1 = Color.from('rgb', [128, 64, 128, 200]).modify('saturate', 'hsl')\n// rgb { r: 160, g: 32, b: 160, a: 200, bitDepth: 8, max: 255 }\nconst color2 = Color.from('rgb', [128, 64, 128, 200]).modify('saturate', 'hsv')\n// rgb { r: 128, g: 32, b: 128, a: 200, bitDepth: 8, max: 255 }\n")),(0,a.kt)("h2",{id:"typescript"},"TypeScript"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import Color, { colorTypes } from 'chromaticity-color-utilities'\n\nconst color1: colorTypes.rgb[] = Color.from('rgb', [128, 64, 128, 200]).modify(\n  'saturate',\n  'hsl'\n)\n")))}d.isMDXComponent=!0}}]);