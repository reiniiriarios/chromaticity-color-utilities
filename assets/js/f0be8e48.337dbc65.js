"use strict";(self.webpackChunkchromaticity_color_utilities_documentation=self.webpackChunkchromaticity_color_utilities_documentation||[]).push([[5154],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return f}});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},i=Object.keys(e);for(o=0;o<i.length;o++)r=i[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)r=i[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=o.createContext({}),p=function(e){var t=o.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},s=function(e){var t=p(e.components);return o.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(r),f=n,b=m["".concat(c,".").concat(f)]||m[f]||u[f]||i;return r?o.createElement(b,a(a({ref:t},s),{},{components:r})):o.createElement(b,a({ref:t},s))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,a=new Array(i);a[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:n,a[1]=l;for(var p=2;p<i;p++)a[p]=r[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,r)}m.displayName="MDXCreateElement"},7387:function(e,t,r){r.r(t),r.d(t,{assets:function(){return s},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var o=r(7462),n=r(3366),i=(r(7294),r(3905)),a=["components"],l={title:"Kelvin: Color Temperature",sidebar_position:18},c="Kelvin",p={unversionedId:"color-types/kelvin",id:"color-types/kelvin",title:"Kelvin: Color Temperature",description:"Color Temperature",source:"@site/docs/color-types/kelvin.md",sourceDirName:"color-types",slug:"/color-types/kelvin",permalink:"/chromaticity-color-utilities/docs/color-types/kelvin",tags:[],version:"current",sidebarPosition:18,frontMatter:{title:"Kelvin: Color Temperature",sidebar_position:18},sidebar:"tutorialSidebar",previous:{title:"Wavelengths of Light",permalink:"/chromaticity-color-utilities/docs/color-types/nm"},next:{title:"Color Schemes",permalink:"/chromaticity-color-utilities/docs/color-schemes/"}},s={},u=[{value:"JavaScript",id:"javascript",level:2},{value:"TypeScript",id:"typescript",level:2}],m={toc:u};function f(e){var t=e.components,r=(0,n.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"kelvin"},"Kelvin"),(0,i.kt)("div",{class:"subheader"},"Color Temperature"),(0,i.kt)("p",null,"This is a one-way approximation. There is no ",(0,i.kt)("inlineCode",{parentName:"p"},".to('kelvin')")," method option. This method uses trapezoid integration to sum the wavelength distribution of energy through a black body tensor. While an approximation, it is a rather accurate one. Temperatures above 10k","\xb0","K may be less accurate, but the method allows for temperatures up to 40k","\xb0","K"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"Color.from('kelvin', degrees: number)\n")),(0,i.kt)("h2",{id:"javascript"},"JavaScript"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const Color = require('chromaticity-color-utilities')\n\nconst color1 = Color.from('kelvin',1000).to('rgb')\n//  rgb { r: 255, g: 13, b: 0, a: 255, bitDepth: 8, max: 255 }\nconst color1 = Color.from('kelvin',2000).to('rgb')\n//  rgb { r: 255, g: 169, b: 7, a: 255, bitDepth: 8, max: 255 }\nconst color1 = Color.from('kelvin',4000).to('rgb')\n//  rgb { r: 240, g: 255, b: 174, a: 255, bitDepth: 8, max: 255 }\nconst color1 = Color.from('kelvin',8000).to('rgb')\n//  rgb { r: 143, g: 232, b: 255, a: 255, bitDepth: 8, max: 255 }\nconst color1 = Color.from('kelvin',10000).to('rgb')\n//  rgb { r: 121, g: 210, b: 255, a: 255, bitDepth: 8, max: 255 }\n")),(0,i.kt)("h2",{id:"typescript"},"TypeScript"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import Color, { colorTypes } from 'chromaticity-color-utilities'\n\nconst c: colorTypes.kelvin = Color.from('kelvin',1000)\n")))}f.isMDXComponent=!0}}]);