"use strict";(self.webpackChunkchromaticity_color_utilities_documentation=self.webpackChunkchromaticity_color_utilities_documentation||[]).push([[1666],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},i=Object.keys(e);for(o=0;o<i.length;o++)r=i[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)r=i[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=o.createContext({}),s=function(e){var t=o.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=s(e.components);return o.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(r),m=n,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||i;return r?o.createElement(f,a(a({ref:t},u),{},{components:r})):o.createElement(f,a({ref:t},u))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,a=new Array(i);a[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:n,a[1]=c;for(var s=2;s<i;s++)a[s]=r[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9183:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return p}});var o=r(7462),n=r(3366),i=(r(7294),r(3905)),a=["components"],c={layout:"page",title:"Desaturate",parent:"Modifying Colors",nav_order:5},l="Desaturate",s={unversionedId:"modifying-colors/desaturate",id:"modifying-colors/desaturate",title:"Desaturate",description:"Methods available are: hsv, hsl. The input color type does not matter.",source:"@site/docs/modifying-colors/desaturate.md",sourceDirName:"modifying-colors",slug:"/modifying-colors/desaturate",permalink:"/chromaticity-color-utilities/docs/modifying-colors/desaturate",editUrl:"https://github.com/reiniiriarios/chromaticity-color-utilities/docs/docs/modifying-colors/desaturate.md",tags:[],version:"current",frontMatter:{layout:"page",title:"Desaturate",parent:"Modifying Colors",nav_order:5},sidebar:"tutorialSidebar",previous:{title:"Darken",permalink:"/chromaticity-color-utilities/docs/modifying-colors/darken"},next:{title:"Lighten",permalink:"/chromaticity-color-utilities/docs/modifying-colors/lighten"}},u={},p=[{value:"JavaScript",id:"javascript",level:2},{value:"TypeScript",id:"typescript",level:2}],d={toc:p};function m(e){var t=e.components,r=(0,n.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"desaturate"},"Desaturate"),(0,i.kt)("p",null,"Methods available are: ",(0,i.kt)("inlineCode",{parentName:"p"},"hsv"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"hsl"),". The input color type does not matter."),(0,i.kt)("p",null,"These methods are intended to provide alternative ways of modifying a color versus changing the values directly, which can make more sense."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},".modify('saturate', {\n  amount: number, // optional, 0 - 1, defaults to 0.5\n  method: string, // optional, defaults to 'hsl'\n  round: boolean, // optional, defaults to true\n})\n")),(0,i.kt)("h2",{id:"javascript"},"JavaScript"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const Color = require('chromaticity-color-utilities')\n\nconst color1 = Color.from('rgb', [255, 0, 255, 200]).modify('desaturate', 'hsl')\n// rgb { r: 191, g: 64, b: 191, a: 200, bitDepth: 8, max: 255 }\nconst color2 = Color.from('rgb', [255, 0, 255, 200]).modify('desaturate', 'hsl')\n// rgb { r: 255, g: 128, b: 255, a: 200, bitDepth: 8, max: 255 }\n")),(0,i.kt)("h2",{id:"typescript"},"TypeScript"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import Color, { colorTypes } from 'chromaticity-color-utilities'\n\nconst color1: colorTypes.rgb[] = Color.from('rgb', [255, 0, 255, 200]).modify(\n  'desaturate',\n  'hsl'\n)\n")))}m.isMDXComponent=!0}}]);