"use strict";(self.webpackChunkchromaticity_color_utilities_documentation=self.webpackChunkchromaticity_color_utilities_documentation||[]).push([[9342],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},c=Object.keys(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},b=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,c=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),b=p(r),m=o,y=b["".concat(l,".").concat(m)]||b[m]||s[m]||c;return r?n.createElement(y,i(i({ref:t},u),{},{components:r})):n.createElement(y,i({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=r.length,i=new Array(c);i[0]=b;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var p=2;p<c;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}b.displayName="MDXCreateElement"},156:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return a},metadata:function(){return p},toc:function(){return s}});var n=r(7462),o=r(3366),c=(r(7294),r(3905)),i=["components"],a={title:"YPbPr",sidebar_position:15},l="YPbPr",p={unversionedId:"color-types/ypbpr",id:"color-types/ypbpr",title:"YPbPr",description:"Analog video component signals",source:"@site/docs/color-types/ypbpr.md",sourceDirName:"color-types",slug:"/color-types/ypbpr",permalink:"/chromaticity-color-utilities/docs/color-types/ypbpr",editUrl:"https://github.com/reiniiriarios/chromaticity-color-utilities/docs/docs/color-types/ypbpr.md",tags:[],version:"current",sidebarPosition:15,frontMatter:{title:"YPbPr",sidebar_position:15},sidebar:"tutorialSidebar",previous:{title:"CIE L*u*v*",permalink:"/chromaticity-color-utilities/docs/color-types/luv"},next:{title:"YCbCr",permalink:"/chromaticity-color-utilities/docs/color-types/ycbcr"}},u={},s=[{value:"JavaScript",id:"javascript",level:2},{value:"TypeScript",id:"typescript",level:2}],b={toc:s};function m(e){var t=e.components,r=(0,o.Z)(e,i);return(0,c.kt)("wrapper",(0,n.Z)({},b,r,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"ypbpr"},"YPbPr"),(0,c.kt)("div",{class:"subheader"},"Analog video component signals"),(0,c.kt)("p",null,"Also written Y'PbPr or YP",(0,c.kt)("sub",null,"B"),"P",(0,c.kt)("sub",null,"R"),"."),(0,c.kt)("ul",null,(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("p",{parentName:"li"},"Y' = luma and sync (brightness/luminance and syncrhonization)")),(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("p",{parentName:"li"},"Pb = difference between blue and luma (B - Y)")),(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("p",{parentName:"li"},"Pr = difference between red and luma (R - Y)")),(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("p",{parentName:"li"},"Kb = constant defined from target color space, such that Kb + Kr + Kg = 1")),(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("p",{parentName:"li"},"Kr = constant defined from target color space, such that Kb + Kr + Kg = 1"))),(0,c.kt)("p",null,"Kb and Kr constants are not yet included in this package."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-ts"},"Color.from('ypbpr', [y, pb, pr], {\n  kb: number, // REQUIRED\n  kr: number, // REQUIRED\n})\n\n.to('ypbpr', {\n  kb: number, // REQUIRED\n  kr: number, // REQUIRED\n})\n\n// YCbCr conversion\n.to('ycbcr', {\n  yLower: number, // optional, default = 16,  lower bounds of Y'\n  yUpper: number, // optional, default = 235, upper bounds of Y'\n  cLower: number, // optional, default = 16,  lower bounds of Cb and Cr\n  cUpper: number, // optional, default = 240, upper bounds of Cb and Cr\n})\n")),(0,c.kt)("h2",{id:"javascript"},"JavaScript"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},"const Color = require('chromaticity-color-utilities')\n\nconst color1 = Color.from(\n  'ypbpr',\n  [0.2848, 0.3854278939426601, 0.45415290830581667]\n)\nconst color3 = color2.to('ypbpr', {\n  kb: 0.0722, // Rec709\n  kr: 0.2126, // Rec709\n})\nconst color4 = color1.to('ycbcr')\nconst color5 = color1.to('ycbcr', {\n  yLower: 0,\n  yUpper: 255,\n  cLower: 0,\n  cUpper: 255,\n})\n")),(0,c.kt)("h2",{id:"typescript"},"TypeScript"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-ts"},"import Color, { colorTypes } from 'chromaticity-color-utilities'\n\nconst c: colorTypes.ypbpr = Color.from(\n  'ypbpr',\n  [0.2848, 0.3854278939426601, 0.45415290830581667]\n)\n")))}m.isMDXComponent=!0}}]);