"use strict";(self.webpackChunkchromaticity_color_utilities_documentation=self.webpackChunkchromaticity_color_utilities_documentation||[]).push([[7162],{3905:function(e,t,n){n.d(t,{Zo:function(){return g},kt:function(){return u}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},g=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,g=i(e,["components","mdxType","originalType","parentName"]),p=s(n),u=o,m=p["".concat(c,".").concat(u)]||p[u]||d[u]||a;return n?r.createElement(m,l(l({ref:t},g),{},{components:n})):r.createElement(m,l({ref:t},g))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var s=2;s<a;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9390:function(e,t,n){n.r(t),n.d(t,{assets:function(){return g},contentTitle:function(){return c},default:function(){return u},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return d}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),l=["components"],i={sidebar_position:1,title:"Getting Started"},c="Getting Started",s={unversionedId:"getting-started",id:"getting-started",title:"Getting Started",description:"The purpose of this library is to:",source:"@site/docs/getting-started.md",sourceDirName:".",slug:"/getting-started",permalink:"/chromaticity-color-utilities/docs/getting-started",editUrl:"https://github.com/reiniiriarios/chromaticity-color-utilities/docs/docs/getting-started.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Getting Started"},sidebar:"tutorialSidebar",next:{title:"Color Types and Conversions",permalink:"/chromaticity-color-utilities/docs/color-types/"}},g={},d=[{value:"Installation",id:"installation",level:2},{value:"Example Usage",id:"example-usage",level:2},{value:"Converting an RGB value to HSV",id:"converting-an-rgb-value-to-hsv",level:3},{value:"Converting a HEX string to 10-bit Rec. 709 RGB at video levels",id:"converting-a-hex-string-to-10-bit-rec-709-rgb-at-video-levels",level:3},{value:"Converting a HEX string/integer to L*a*b*",id:"converting-a-hex-stringinteger-to-lab",level:3},{value:"Getting the Red value of a HSL color",id:"getting-the-red-value-of-a-hsl-color",level:3},{value:"Converting an HSL color to a Y&#39;PbPr analog video signal",id:"converting-an-hsl-color-to-a-ypbpr-analog-video-signal",level:3},{value:"Blending two colors together",id:"blending-two-colors-together",level:3},{value:"Generating color schemes",id:"generating-color-schemes",level:3},{value:"Converting an RGB color to HSV, darkening it 20%, and generating a tetradic color scheme",id:"converting-an-rgb-color-to-hsv-darkening-it-20-and-generating-a-tetradic-color-scheme",level:3},{value:"Desaturating a HEX color by 20%, converting to L*a*b*, and generating a gradient to another color, converted from HSL",id:"desaturating-a-hex-color-by-20-converting-to-lab-and-generating-a-gradient-to-another-color-converted-from-hsl",level:3},{value:"TypeScript",id:"typescript",level:2}],p={toc:d};function u(e){var t=e.components,n=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"getting-started"},"Getting Started"),(0,a.kt)("p",null,"The purpose of this library is to:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Simplify conversion between multiple color spaces"),(0,a.kt)("li",{parentName:"ul"},"Allow for easy generation of color schemes and gradients based on a variety of methods")),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"npm i chromaticity-color-utilities\n")),(0,a.kt)("h2",{id:"example-usage"},"Example Usage"),(0,a.kt)("h3",{id:"converting-an-rgb-value-to-hsv"},"Converting an RGB value to HSV"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const Color = require('chromaticity-color-utilities')\n\nconst color1 = Color.from('rgb', [255, 128, 0]).to('hsv')\n// hsv { h: 34, s: 100, v: 88, a: 100 }\n")),(0,a.kt)("h3",{id:"converting-a-hex-string-to-10-bit-rec-709-rgb-at-video-levels"},"Converting a HEX string to 10-bit Rec. 709 RGB at video levels"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const color2 = Color.from('hex', 'ff3201').to('rec709rgb', { bitRate: 10 })\n// rec709rgb { r: 940, g: 298, b: 67, a: 940, bitDepth: 10, max: 1023 }\n")),(0,a.kt)("h3",{id:"converting-a-hex-stringinteger-to-lab"},"Converting a HEX string/integer to L","*","a","*","b","*"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const color6 = Color.from('hex', '#f0f').to('lab')\n// defaulting to sRGB color space with a D65 standard illuminant reference white\n// lab { l: 60, a: 98, b: -61 }\n\nconst color6 = Color.from('hex', 0xff00ff).to('lab', {\n  colorSpace: 'AdobeRGB',\n  referenceWhite: 'D50',\n})\n// lab { l: 68, a: 101, b: -51 }\n")),(0,a.kt)("h3",{id:"getting-the-red-value-of-a-hsl-color"},"Getting the Red value of a HSL color"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const red = Color.from('hsl', [280, 80, 90]).to('rgb').r\n// 250\n")),(0,a.kt)("h3",{id:"converting-an-hsl-color-to-a-ypbpr-analog-video-signal"},"Converting an HSL color to a Y'PbPr analog video signal"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const color7 = Color.from('hsl', [300, 100, 50]).to('ypbpr', {\n  kb: 0.0722,\n  kr: 0.2126,\n})\n// ypbpr { y: 0.2848, pb: 0.3854278939426601, pr: 0.45415290830581667 }\n")),(0,a.kt)("h3",{id:"blending-two-colors-together"},"Blending two colors together"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const color3 = Color.from('rgb', [255, 0, 0]).modify('blend', {\n  with: Color.from('rgb', [0, 255, 0]),\n})\n// rgb { r: 128, g: 128, b: 0, a: 255, bitDepth: 8, max: 255 }\n\nconst color4 = Color.from('rgb', [255, 0, 0]).modify('blend', {\n  with: Color.from('hex', '00ff00'),\n  amount: 0.4,\n})\n// rgb { r: 153, g: 102, b: 0, a: 255, bitDepth: 8, max: 255 }\n\nconst color5 = Color.from('hex', 'ee5432')\n  .modify('blend', {\n    with: Color.from('rgb', [234, 100, 20, 64]),\n    amount: 1 / 3,\n  })\n  .to('hsv')\n// hsv { h: 15, s: 83, v: 93, a: 75 }\n")),(0,a.kt)("h3",{id:"generating-color-schemes"},"Generating color schemes"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const scheme1 = Color.from('rgb', [200, 180, 0]).scheme('splitComplement')\n// [\n//   rgb { r: 200, g: 180, b: 0, a: 255, bitDepth: 8, max: 255 },\n//   rgb { r: 0, g: 120, b: 200, a: 255, bitDepth: 8, max: 255 },\n//   rgb { r: 80, g: 0, b: 200, a: 255, bitDepth: 8, max: 255 }\n// ]\n\nconst scheme2 = Color.from('hsl', [180, 80, 48]).scheme('tetradic', {\n  angle: 40,\n})\n// [\n//   hsl { h: 180, s: 80, l: 48, a: 100 },\n//   hsl { h: 220, s: 80, l: 48, a: 100 },\n//   hsl { h: 40, s: 80, l: 48, a: 100 },\n//   hsl { h: 0, s: 80, l: 48, a: 100 }\n// ]\n")),(0,a.kt)("h3",{id:"converting-an-rgb-color-to-hsv-darkening-it-20-and-generating-a-tetradic-color-scheme"},"Converting an RGB color to HSV, darkening it 20%, and generating a tetradic color scheme"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const scheme1 = Color.from('rgb', [200, 100, 150])\n  .to('hsl')\n  .modify('darken', { amount: 0.2 })\n  .scheme('tetradic')\n// [\n//   hsl { h: 330, s: 48, l: 47, a: 100 },\n//   hsl { h: 15, s: 48, l: 47, a: 100 },\n//   hsl { h: 195, s: 48, l: 47, a: 100 },\n//   hsl { h: 150, s: 48, l: 47, a: 100 }\n// ]\n")),(0,a.kt)("h3",{id:"desaturating-a-hex-color-by-20-converting-to-lab-and-generating-a-gradient-to-another-color-converted-from-hsl"},"Desaturating a HEX color by 20%, converting to L","*","a","*","b","*",", and generating a gradient to another color, converted from HSL"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const scheme1 = Color.from('hex', 0x9a237f)\n  .modify('desaturate', { amount: 0.2 })\n  .to('lab', {\n    colorSpace: 'AdobeRGB',\n    referenceWhite: 'D50',\n  })\n  .scheme('gradient', {\n    with: Color.from('hsl', [300, 50, 45]),\n    colors: 5,\n  })\n// [\n//   lab { l: 76, a: 85, b: 44 },\n//   lab { l: 72, a: 85, b: 16 },\n//   lab { l: 70, a: 85, b: -11 },\n//   lab { l: 70, a: 85, b: -36 },\n//   lab { l: 73, a: 85, b: -56 }\n// ]\n")),(0,a.kt)("h2",{id:"typescript"},"TypeScript"),(0,a.kt)("p",null,"Types are available for each color model, and are described throughout the documentation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import Color, { colorTypes } from 'chromaticity-color-utilites'\n\ncolorTypes.rgb\ncolorTypes.hsi\ncolorTypes.cmyk\ncolorTypes.yiq\ncolorTypes.nm\ncolorTypes.kelvin\n")))}u.isMDXComponent=!0}}]);